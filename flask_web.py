#!/usr/bin/env python# -*- coding: utf-8 -*-# by riclue  2018-09-04from flask import Flask, abort, request, jsonifyapp = Flask(__name__)# 测试用户数据暂时存放在taskstasks = []def pin_json(result,msg,data):    '''    把字段拼成json的函数    :param result:    :param msg:    :param data:    :return: 拼接好的字符串    '''    json = {        "result": result,        "msg": msg,        "data": data    }    return json@app.route('/register/', methods=['POST'])def add_task():    '''    注册接口    参数[phone][name][password]  password没有处理，也可不出来，需要前端传md5    接口请求使用POST ，body只能使用json格式    :return: 注册完成信息    '''    if not request.json or 'phone' not in request.json or 'name' not in request.json or 'password' not in request.json:        abort(400)    #上步骤，判断请求的body的json里是否包含必要的参数，不包含报400    request_phone = request.json['phone']     #从请求的body中获取phone的字符串并赋值给request_phone    # 组装插入tasks的值    task = {        'id': len(tasks),        'phone': request.json['phone'],        'name': request.json['name'],        'password': request.json['password']    }    if len(list(filter(lambda t: t['phone'] == request_phone, tasks))) != 0:        #根据手机号判断tasks是否包含这个手机号（根据获取的list的长度来判断）        #存在的话，则返回已存在        return jsonify({'result': 'failure', 'msg': 'phone  already exists.'})    #jsonify是把字符串转成json格式输出    else:        #task内不存在，则在tasks内append这个信息        tasks.append(task)        return jsonify(pin_json(result="success",msg="Register success",data=task))@app.route('/userinfo/', methods=['GET'])def get_userinfo():    '''    获取用户信息/用户列表    参数[phone]不指定返回全部    :return:    '''    if not request.args or 'phone' not in request.args:        # 从get请求的参数中判断有没有指定phone        # 则返回全部用户列表        result = "success"        msg = "查询列表数据"        data = tasks   #data复制全部的用户信息        return jsonify(pin_json(result,msg,data))    else:        #指定了phone的话，需要判断手机号是否存在。        take_phone = request.args['phone']        #print(take_phone)        #根据手机号筛选用户信息，有则返回一个列表[{'id':0,'phone':'13333333333','name':'jhon','password':'123456'}]        #没有则返回[]        task = list(filter(lambda t: t['phone'] == take_phone, tasks))        #print(task)        data = task   #使输出的json中data的值为查询到的。        result = "success"        if task:    #根据task判断，是否是否有这个手机号            msg = "查询用户信息成功"            return jsonify(pin_json(result,msg,data))        else:            msg = "phone not found."            return jsonify(pin_json(result,msg,data))@app.route('/login/', methods=['POST'])def login():    '''    登陆接口    参数[phone][password]    :return: 登陆成功信息    '''    if not request.json or 'phone' not in request.json or 'password' not in request.json:        abort(400)    #限制post请求的body为json，限制请求的参数必须包含phone和password    else:        take_phone = request.json['phone']        take_pwd = request.json['password']        task = list(filter(lambda t: t['phone'] == take_phone, tasks))#根据手机号查询用户        #print (task)        if task:      #根据查询到的结果，判断用户是否已经注册。            if task[0]['password'] != str(take_pwd):  #根据查询到的结果中的密码，判断是否一致。                msg = "手机号或密码错误，请重新输入"    #不一致提示密码错我                return jsonify({"result":"failure","msg":msg})            else:                result="success"                msg = "登陆成功，欢迎{}".format(task[0]["name"])                data = task                return jsonify(pin_json(result,msg,data))        else:            msg = "该手机号没有注册，请注册。"            return jsonify({"result":"failure","msg":msg})if __name__ == "__main__":    '''    启动配置    '''    # 设置json的代码不是ASCII码，即可以展示中文，默认为true，不想展示中文直接去掉，或改为true    app.config['JSON_AS_ASCII'] = False    app.run(host="0.0.0.0", port=8383, debug=True)  # 将host设置为0.0.0.0，则外网用户也可以访问到这个服务